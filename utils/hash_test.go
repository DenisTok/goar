package utils

import (
	"testing"

	"github.com/everFinance/goar/types"
	"github.com/stretchr/testify/assert"
)

func TestDataHash(t *testing.T) {
	tx := types.Transaction{
		Format: 2,
		ID:     "QLRuAX12XtlNwDZ1UdPTfGV5grt-V1BJksTjyvbGeM4",
		LastTx: "JrWwVEXja1AI7mVB2v24Ye_Dd2WIUTVaHdmpFrse37dOqnqPy-6UtsPuXeHl4SCG",
		Owner:  "oA4bDVEjBSVf324cQPfyJcE-90rwPo1xOvrvc7g2-Lminag5lT0JZAVfcSjg1vgeoivSu2I0yO-jznomZ1m4H2CUJGY8Hc3wEsO3SUqxPIEaOKuFvezeAZpRuh__SlzYGfvhwLfoGf7KJ6UlvcuNm49xyIfsRGTc52u-fTDevqvBtz5YtYsyk6LcMoCMDoPzE4ldTBZ8V3ucaFXz-kbwkN1aU2Ph8MYfKIySOtjeVsCxU5BBRn39cHm4dVbDqEZu8QT-l26d8QjITl91tpTatzGivvFioR5_dJEtlo1xkNsOYIsPXT6WrwgPkRYflqhJ8GW9wqp7QCoekYIxr2nQXxOm0lLsPoA_gx4ZCDGsfUtumWdk2UV-cKsvQo-iuxPPVWX-7bWTP9aMKDTyyywW9Ho6r99ggeSEpNYYGqYBmLb-v2S0L-8EdvjAQ2M6yCw0qpNN6XhFvNVcPZXATrhhDIijp-KXDHx2zy2IDubjShCmZOSRrJy5OV6EfJOpPEgBXO-CdKtVk48uh8htb5SMEZ48hDyeU-4Htjaryz-N_M1n9Rv9ffqVQf-pIrP_cpw0DzxcrvFsFRYnAkFLnXlY9FX5mha2FW5veeL0ZMCN7ETEVovCrO1Q8_sV9v2rs6S8NuMjA4RW93nKJjqvAJFkt7rMpv4a_tuftZvuX8OzxOc",
		Tags: []types.Tag{
			types.Tag{
				Name:  "QXBwLU5hbWU",
				Value: "U21hcnRXZWF2ZUFjdGlvbg",
			},
			types.Tag{
				Name:  "QXBwLVZlcnNpb24",
				Value: "MC4zLjA",
			},
			types.Tag{
				Name:  "Q29udHJhY3Q",
				Value: "dHJ1ZQ",
			},
			types.Tag{
				Name:  "SW5wdXQ",
				Value: "eyJmdW5jdGlvbiI6InRyYW5zZmVyIiwicXR5Ijo1MDAsInRhcmdldCI6Ilp5aGhBTHdxazhuMnVyV1Y0RTNqSEJjNzd3YWE1RnItcUhscl9jdGlIQk0ifQ",
			},
		},
		Target:    "",
		Quantity:  "0",
		DataSize:  "4",
		DataRoot:  "z3rQGxyiqdQuOh2dxDst176oOKmW3S9MwQNTEh4DK1U",
		Reward:    "1195477",
		Signature: "CjGBVPulxEzsKBi83L7dhAQtgWf7vjT5JDYazJyi4-p37nVA0ghQcGbeGjKy9HO4t-dgLqDExw_PDbtr_9SRbRmkBNEPgnlFVT4U82MqxgJrVm6adMlJtvC-Vw-O3nfT3ObtaBOCxUFflOcTrPAW7V4p0MmXwU3u_xw4hPVYW9Da1c2SnwFzWDU5mG0y8pego9ZNWM9bfYylQz25fOgfDeWJgHZ5g540EfH2wC55obx_qCezBVCFd-hiiznP5UXMplR6exQM_fBomfMFd7TAfhYkBV-eRqykmj68xGQOS4ynwKFWajrM4BiP-6fc68bQn8PLYjtcvBAdhH9J8zPZaArY7ozRwnmveLe-lfQG7pQUDKpwXIOUcr6N3wBotN1Tm37k6Lp-hGi24zQhndZmf6S6mrcodanvXKBUYgMqs6TrEHSNFzX69WmoxTdW13COv0txY_wePB_RYRlnCuwOEiNj396_pZoTHdxe2Qvl86ZP_rlCVvpmVPmBxon0i6kdvxC02w5rWnKBh2YK-wyed47SyCgX6EVEThTxKcQeXvs6yIwxYOhH044_oSOzOouOAZqigtGy6BDYJu2Y4jQq9N55SRCP1VB6F1AQsHPAMmnPnewwXEJl-vG3MvESZzjEhtG5KtN4uwzGMIPLtY3dba1EUWfcxgwfUekUIREcKv4",
	}

	signData, err := DataHash(&tx)
	assert.NoError(t, err)
	assert.Equal(t, []uint8([]byte{0xe2, 0x9f, 0xa3, 0x1b, 0xf2, 0x35, 0xe8, 0xc0, 0x9d, 0x97, 0x12, 0xe3, 0x40, 0x5, 0x4a, 0x26, 0xba, 0x8f, 0x67, 0x47, 0x3b, 0x68, 0x72, 0x25, 0xc0, 0x6d, 0x92, 0xd8, 0xb0, 0x59, 0x8a, 0x88, 0x89, 0x10, 0x41, 0xf9, 0x60, 0xee, 0x25, 0x23, 0x82, 0xbd, 0x14, 0xcc, 0xc, 0xeb, 0xa9, 0x23}), signData)
}

func TestDeepHash(t *testing.T) {
	dataList := []interface{}{}
	dataList = append(dataList, Base64Encode([]byte("123")))
	assert.Equal(t, [48]uint8([48]uint8{0xfd, 0x33, 0x8d, 0x7c, 0x23, 0x3, 0xe5, 0xed, 0xb3, 0xce, 0x4b, 0x64, 0xc2, 0xbc, 0xd8, 0xa9, 0x4b, 0xd0, 0xee, 0x58, 0x79, 0x33, 0x6a, 0x3c, 0x11, 0xc5, 0x1, 0xa5, 0x6d, 0x79, 0xc7, 0xc7, 0x46, 0x1b, 0xca, 0x4a, 0x2a, 0xe3, 0xdc, 0xa9, 0xa, 0x8b, 0x66, 0xc8, 0xd, 0x5e, 0x53, 0x61}), DeepHash(dataList))

	dataList = append(dataList, Base64Encode([]byte("123")))
	assert.Equal(t, [48]uint8{0xe7, 0xb, 0xed, 0x22, 0x75, 0xe0, 0x4, 0xd, 0xf5, 0x3c, 0x97, 0xe9, 0x3f, 0x97, 0xa9, 0x5f, 0xa, 0x4d, 0x29, 0xc8, 0x5d, 0x76, 0x5f, 0x54, 0x9a, 0x32, 0x74, 0xb6, 0x6b, 0xf, 0x55, 0xa4, 0xb9, 0x2f, 0x23, 0x73, 0x34, 0xda, 0x1f, 0x25, 0xc1, 0xac, 0x59, 0x14, 0xfb, 0xe0, 0xfb, 0x89}, DeepHash(dataList))

	dataList = append(dataList, [][]string{
		[]string{
			Base64Encode([]byte("APP")),
			Base64Encode([]byte("1.0")),
		},
		[]string{
			Base64Encode([]byte("Contract")),
			Base64Encode([]byte("0x000")),
		},
	})
	assert.Equal(t, [48]uint8([48]uint8{0xfb, 0x9b, 0xee, 0xfc, 0x83, 0x50, 0xa, 0xe9, 0xc9, 0x41, 0x9f, 0xb1, 0x58, 0x9b, 0xe3, 0x9c, 0x55, 0x73, 0xfd, 0xad, 0xed, 0xbd, 0x85, 0xc9, 0x87, 0x42, 0x9, 0xfb, 0x4b, 0xb, 0x45, 0x83, 0xb8, 0x5c, 0xfa, 0xa, 0xf2, 0x21, 0x7c, 0xab, 0x65, 0x71, 0x5b, 0xf0, 0x88, 0xc6, 0xc2, 0x27}), DeepHash(dataList))
}

func TestDeepHashStr(t *testing.T) {
	hash := deepHashStr(Base64Encode([]byte("123")))
	assert.Equal(t, [48]uint8([48]byte{0x27, 0xbb, 0xb6, 0x32, 0x9a, 0xcb, 0x39, 0x7e, 0x10, 0x59, 0x85, 0xd2, 0x66, 0xa0, 0xe2, 0x1b, 0x4e, 0x64, 0xf1, 0xe0, 0x97, 0x8d, 0x2a, 0x31, 0x16, 0x88, 0xca, 0x99, 0xa7, 0xf5, 0xa4, 0x94, 0xd5, 0x8f, 0xf9, 0xf6, 0xc4, 0xc8, 0x66, 0x33, 0x36, 0x9, 0x83, 0x32, 0xd6, 0x88, 0x59, 0xc3}), hash)
}
